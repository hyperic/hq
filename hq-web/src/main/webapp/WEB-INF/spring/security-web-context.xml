<!--


    NOTE: This copyright does *not* cover user programs that use HQ
    program services by normal system calls through the application
    program interfaces provided as part of the Hyperic Plug-in Development
    Kit or the Hyperic Client Development Kit - this is merely considered
    normal use of the program, and does *not* fall under the heading of
     "derived work".

     Copyright (C) [2009-2010], VMware, Inc.
     This file is part of HQ.

     HQ is free software; you can redistribute it and/or modify
     it under the terms version 2 of the GNU General Public License as
     published by the Free Software Foundation. This program is distributed
     in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
     even the implied warranty of MERCHANTABILITY or FITNESS FOR A
     PARTICULAR PURPOSE. See the GNU General Public License for more
     details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
     USA.


-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
		<sec:filter-chain-map path-type="ant">
			<sec:filter-chain pattern="/lather/**" filters="none" />
			<sec:filter-chain pattern="/jboss-lather/**" filters="none" />
			<sec:filter-chain pattern="/*.ico" filters="none" />
			<sec:filter-chain pattern="/rss/**" filters="none" />
			<sec:filter-chain pattern="/static/**" filters="none" />
			<sec:filter-chain pattern="/css/**" filters="none" />
			<sec:filter-chain pattern="/js/**" filters="none" />
			<sec:filter-chain pattern="/images/**" filters="none" />
			<sec:filter-chain pattern="/ServerInvokerServlet/**" filters="none"/>
            <sec:filter-chain pattern="/transport/**" filters="none" />
			<sec:filter-chain pattern="/hqu/hqapi*/**" filters="securityContextPersistenceFilter,
																basicAuthenticationFilter,
																basicAuthenticationExceptionTranslationFilter,
																basicSessionManagementFilter,
			    	                                     		apiFilterSecurityInterceptor" />
			<sec:filter-chain pattern="/hqu/health/status/**" filters="securityContextPersistenceFilter,
																basicAuthenticationFilter,
																basicAuthenticationExceptionTranslationFilter,
																basicSessionManagementFilter,
			    	                                     		filterSecurityInterceptor" /> 
             <sec:filter-chain pattern="/rest/management/**" filters="securityContextPersistenceFilter,
                                                                logoutFilter,
                                                                basicAuthenticationFilter,
                                                                basicAuthenticationExceptionTranslationFilter,
                                                                requestCacheAwareFilter,
                                                                securityContextHolderAwareRequestFilter,
                                                                formSessionManagementFilter,
                                                                filterSecurityInterceptor"/>
             <sec:filter-chain pattern="/rest/**" filters="securityContextPersistenceFilter,
																basicAuthenticationFilter,
																basicAuthenticationExceptionTranslationFilter,
																apiBasicSessionManagementFilter,
			    	                                     		filterSecurityInterceptor"/>
			<sec:filter-chain pattern="/**" filters="securityContextPersistenceFilter,
													 logoutFilter,
			                                         basicAuthenticationFilter,
													 formBasedAuthenticationFilter,
													 formAnonymousAuthFilter,
													 requestCacheAwareFilter,
													 securityContextHolderAwareRequestFilter,
			                                         formSessionManagementFilter,
			                                         formAuthenticationExceptionTranslationFilter,
			                                         filterSecurityInterceptor" />
                                       
			                                   
		</sec:filter-chain-map>
	</bean>

	<!-- Setup security context persistence filter -->
	<bean id="securityContextRepository" class="org.springframework.security.web.context.HttpSessionSecurityContextRepository" />

	<bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
		<property name="securityContextRepository" ref="securityContextRepository" />
	</bean>

	<!-- For logout -->
	<bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg value="/app/login" />
		<constructor-arg>
			<list>
				<bean class="org.hyperic.hq.ui.security.SessionManagingLogoutHandler" />
			</list>
		</constructor-arg>
	</bean>

	<!-- For basic authentication -->
	<bean id="basicAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationEntryPoint" ref="basicAuthenticationEntryPoint" />
		<property name="authenticationDetailsSource" ref="hqAuthenticationDetailsSource"/>
	</bean>

	<bean id="basicAuthenticationEntryPoint" class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
		<property name="realmName" value="HQ-Realm" />
	</bean>

	<bean id="basicAuthenticationExceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint" ref="basicAuthenticationEntryPoint" />
		<property name="accessDeniedHandler">
			<bean class="org.springframework.security.web.access.AccessDeniedHandlerImpl" />
		</property>
	</bean>
	
	<bean id="basicSessionManagementFilter" class="org.springframework.security.web.session.SessionManagementFilter">
		<constructor-arg ref="securityContextRepository" />
		<property name="sessionAuthenticationStrategy" ref="baseSessionInitializationStrategy" />
	</bean>
	
	<!-- For REST API with basic authentication -->
	<bean id="apiBasicSessionManagementFilter" class="org.springframework.security.web.session.SessionManagementFilter">
		<constructor-arg ref="securityContextRepository" />
		<property name="sessionAuthenticationStrategy" ref="apiSessionInitializationStrategy" />
	</bean>

	<!-- For form-based authentication -->
	<bean id="httpSessionRequestCache" class="org.springframework.security.web.savedrequest.HttpSessionRequestCache" />
	
	<bean id="hqAuthenticationDetailsSource" class="org.hyperic.hq.ui.security.HQAuthenticationDetailsSource" />
		
	<bean id="formBasedAuthenticationFilter" class="org.hyperic.hq.ui.security.HQUsernamePasswordAuthenticationFilter">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="sessionAuthenticationStrategy" ref="UISessionInitializationStrategy" />
		<property name="authenticationDetailsSource" ref="hqAuthenticationDetailsSource"/>
		<property name="authenticationSuccessHandler">
			<bean class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
				<property name="defaultTargetUrl" value="/Dashboard.action" />
				<property name="alwaysUseDefaultTargetUrl" value="true"/>
				<property name="requestCache" ref="httpSessionRequestCache" />
				<property name="redirectStrategy">
					<bean class="org.hyperic.hq.ui.security.RegistrationRedirectStrategy">
						<constructor-arg value="/registerUser.action?mode=register" />
					</bean>
				</property>
			</bean>
		</property>
		<property name="authenticationFailureHandler">
			<bean class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
				<property name="defaultFailureUrl" value="/app/login?authfailed=true" />
			</bean>
		</property>
	</bean>
	
	<bean id="formAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<property name="loginFormUrl" value="/app/login" />
	</bean>

	<bean id="formAuthenticationExceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint" ref="formAuthenticationEntryPoint" />
		<property name="requestCache" ref="httpSessionRequestCache" />
	</bean>
	
	<bean id="formSessionManagementFilter" class="org.springframework.security.web.session.SessionManagementFilter">
		<constructor-arg ref="securityContextRepository" />
		<property name="sessionAuthenticationStrategy" ref="UISessionInitializationStrategy" />
	</bean>
	
	<bean id="formAnonymousAuthFilter" class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
  		<property name="key" value="allyourbasebelongtous!"/>
  		<property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS"/>
	</bean>
	
	<!-- Request cache aware filter, this makes sure the original request is used after authenticating -->
	<bean id="requestCacheAwareFilter" class="org.springframework.security.web.savedrequest.RequestCacheAwareFilter" />
	
	<!-- Security context holder aware request filter --> 
	<bean id="securityContextHolderAwareRequestFilter" class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter" />

    <!-- Setup expression handler (for JSP tags) -->
    <bean id="expressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" />

	<!-- Setup the filter security interceptor -->
	<bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="accessDecisionManager">
			<bean class="org.springframework.security.access.vote.AffirmativeBased">
				<property name="allowIfAllAbstainDecisions" value="false" />
				<property name="decisionVoters">
					<list>
						<bean class="org.springframework.security.access.vote.RoleVoter" />
					</list>
				</property>
			</bean>
		</property>
		<property name="securityMetadataSource">
			<sec:filter-security-metadata-source>
		    	<sec:intercept-url pattern="/app/login" access="ROLE_ANONYMOUS,ROLE_HQ_USER" />
		    	<sec:intercept-url pattern="/**" access="ROLE_HQ_USER" />
		    	<sec:intercept-url pattern="/hqu/hqapi*/**" access="ROLE_HQ_USER" />
		    	<sec:intercept-url pattern="/rest/**" access="ROLE_HQ_USER" />  
			</sec:filter-security-metadata-source>
		</property>
	</bean>
	
	<!-- Setup the filter security interceptor for API requests-->
    <bean id="apiFilterSecurityInterceptor" class="org.hyperic.hq.ui.security.ApiFilterSecurityInterceptor">
        <property name="authenticationManager" ref="authenticationManager" />
        <property name="accessDecisionManager">
            <bean class="org.springframework.security.access.vote.AffirmativeBased">
                <property name="allowIfAllAbstainDecisions" value="false" />
                <property name="decisionVoters">
                    <list>
                        <bean class="org.springframework.security.access.vote.RoleVoter" />
                    </list>
                </property>
            </bean>
        </property>
        <property name="securityMetadataSource">
            <sec:filter-security-metadata-source>
                <sec:intercept-url pattern="/hqu/hqapi*/**" access="ROLE_HQ_USER" />                               
            </sec:filter-security-metadata-source>
        </property>
    </bean>
	
	
</beans>
